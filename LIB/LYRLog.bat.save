rem -----------------------------------------------
rem LYRLog.sh
rem -----------------------------------------------

LOG_OPT_DEFAULT="11"
LOG_FILE_ADD=0
LOG_FILE_DT=0
#LOG_DT_FORMAT_DEFAULT='%Y%m%d%H%M%S'
LOG_DT_FORMAT_DEFAULT='%Y%m%d'

rem --------------------------------
FORMAT='%Y-%m-%d %H:%M:%S %N'
rem --------------------------------
loStandard=0
loTextFile=1
loAll=2
rem --------------------------------
NOTSET=0
DEBUG=1
INFO=2
WARNING=3
ERROR=4
CRITICAL=5
DEBUGTEXT=11
BEGIN=21
END=22
PROCESS=23
TEXT=24
rem --------------------------------
ctlsNOTSET=' '
ctlsDEBUG='D'
ctlsINFO='I'
ctlsWARNING='W'
ctlsERROR='E'
ctlsCRITICAL='C'
ctlsBEGIN='<'
ctlsEND='>'
ctlsPROCESS='P'
ctlsDEBUGTEXT='T'
ctlsTEXT=''

rem --------------------------------------------------------------------------------
rem FormatStr
rem --------------------------------------------------------------------------------
function FormatStr { rem Anamesh: str, Alevel: int, Amessage: str
rem beginfunction
    rem echo 'FormatStr...'
    Lnamesh=$1
    Llevel=$2
    Lmessage=$3

    printf -v asctime '%(%Y/%m/%d %H:%M:%S)T' -1

    case "$Llevel" in
    $NOTSET)
        Linfo='NOTSET'
        printf -v LOG_STR "%-s [%-15s] %2d %-10s %-s" "$asctime" "$Lnamesh" "$Llevel" "$Linfo" "$Lmessage"
        ;;
    $DEBUG)
        Linfo='DEBUG'
        printf -v LOG_STR "%-s [%-15s] %2d %-10s %-s" "$asctime" "$Lnamesh" "$Llevel" "$Linfo" "$Lmessage"
        ;;
    $INFO)
        Linfo='INFO'
        printf -v LOG_STR "%-s [%-15s] %2d %-10s %-s" "$asctime" "$Lnamesh" "$Llevel" "$Linfo" "$Lmessage"
        ;;
    $WARNING)
        Linfo='WARNING'
        printf -v LOG_STR "%-s [%-15s] %2d %-10s %-s" "$asctime" "$Lnamesh" "$Llevel" "$Linfo" "$Lmessage"
        ;;
    $ERROR)
        Linfo='ERROR'
        printf -v LOG_STR "%-s [%-15s] %2d %-10s %-s" "$asctime" "$Lnamesh" "$Llevel" "$Linfo" "$Lmessage"
        ;;
    $CRITICAL)
        Linfo='CRITICAL'
        printf -v LOG_STR "%-s [%-15s] %2d %-10s %-s" "$asctime" "$Lnamesh" "$Llevel" "$Linfo" "$Lmessage"
        ;;
    $DEBUGTEXT)
        Linfo='DEBUGTEXT'
        printf -v LOG_STR "%-s" "$Lmessage"
        ;;
    $BEGIN)
        Linfo='BEGIN'
        printf -v LOG_STR "%-s" "$Lmessage"
        ;;
    $END)
        Linfo='END'
        printf -v LOG_STR "%-s" "$Lmessage"
        ;;
    $PROCESS)
        Linfo='PROCESS'
        printf -v LOG_STR "%-s" "$Lmessage"
        ;;
    $TEXT)
        Linfo='TEXT'
        printf -v LOG_STR "%-s" "$Lmessage"
        ;;
    *)
        Linfo=''
        ;;
    esac

}
rem endfunction

rem --------------------------------------------------
#
rem --------------------------------------------------
function AddLog { rem Aout: int, Alevel: int, Value: str
rem beginfunction
    rem echo 'AddLog...'
    Lout=$1
    Llevel=$2
    LValue=$3
    FormatStr "$LOG_SHFILENAME" "$Llevel" "$LValue"
    if [ $Lout -eq 0 ] ; then
        echo "$LOG_STR"
    elif [ $Lout -eq 1 ] ; then
        rem echo "$LOG_STR" >&3
        echo "$LOG_STR" >> "$LOG_FILE"
    elif [ $Lout -eq 2 ] ; then
        rem echo "$LOG_STR"
        rem echo "$LOG_STR" >&3
        echo "$LOG_STR" | tee -a "$LOG_FILE"
    else
        echo 'ERROR' $Lout
    fi
}
rem endfunction

rem --------------------------------------------------
#
rem --------------------------------------------------
function AddLogFile { rem Aout: int, AFileName: str
rem beginfunction
    rem echo 'AddLogFile...'
    Lout=$1
    LFileName="$2"
    if [ -r "$LFileName" ] ; then
        rem чтения файла построчно
        rem while IFS= read -r LValue; do
        rem     AddLog $Lout $TEXT "$LValue"
        rem done < "$LFileName"

        rem Использование дескриптора файла
        rem Вы также можете предоставить ввод в цикл, используя дескриптор файла:
        while IFS= read -r -u9 LValue; do
            AddLog $Lout $TEXT "$LValue"
        done 9< "$LFileName"
        exec 9>&-
    else
        echo 'ERROR' "$LFileName"
    fi
}
rem endfunction

rem --------------------------------------------------------------------------------
rem StartLogFile (AFileName: str):
rem --------------------------------------------------------------------------------
function StartLogFile { rem (AFileName: str):
rem beginfunction
    rem echo 'StartLogFile...'
    rem Файл скрипта: каталог+имя+расширение
    SHFile="$1"
    rem echo "SHFile=$SHFile"
    SHDir=$(ExtractFileDir "$SHFile")
    rem echo "SHDir=$SHDir"
    SHFileName=$(ExtractFileName "$SHFile")
    rem echo "SHFileName=$SHFileName"
    SHFileNameWithoutExt=$(ExtractFileNameWithoutExt "$SHFileName")
    rem echo "SHFileNameWithoutExt=$SHFileNameWithoutExt"
    SHFileExt=$(ExtractFileExt "$SHFileName")
    rem echo "SHFileExt=$SHFileExt"
    
    rem ------------------------------------------------------
    rem Параметры журнала
    rem ------------------------------------------------------
    if [[ -z "$LOG_OPT" ]] ; then
        LOG_OPT=$2
        rem echo "LOG_OPT=$LOG_OPT"
        if [[ -z "$LOG_OPT" ]] ; then
            LOG_OPT="$LOG_OPT_DEFAULT"
        fi
    fi
    rem echo "LOG_OPT=$LOG_OPT"
    LOG_OPT_1=${LOG_OPT:0:1}
    rem echo "LOG_OPT_1=$LOG_OPT_1"
    LOG_OPT_2=${LOG_OPT:1:1}
    rem echo "LOG_OPT_2=$LOG_OPT_2"
    if [[ "$LOG_OPT_1" -eq '1' ]] ; then
        LOG_FILE_ADD=1
    else
        LOG_FILE_ADD=0
    fi
    if [[ "$LOG_OPT_2" -eq '1' ]] ; then
        LOG_FILE_DT=1
    else
        LOG_FILE_DT=0
    fi
    rem echo "LOG_FILE_ADD=$LOG_FILE_ADD"
    rem echo "LOG_FILE_DT=$LOG_FILE_DT"

    rem ------------------------------------------------------
    rem Формат DT
    rem ------------------------------------------------------
    if [[ -z "$LOG_DT_FORMAT" ]] ; then
        LOG_DT_FORMAT=$3
        rem echo "LOG_DT_FORMAT=$LOG_DT_FORMAT"
        if [[ -z "$LOG_DT_FORMAT" ]] ; then
            LOG_DT_FORMAT="$LOG_DT_FORMAT_DEFAULT"
        fi
    fi
    rem echo "LOG_DT_FORMAT=$LOG_DT_FORMAT"

    rem ------------------------------------------------------
    rem Файл скрипта: имя
    rem ------------------------------------------------------
    LOG_SHBASENAME=$(basename "$SHFile" .sh)
    rem echo "LOG_SHBASENAME=$LOG_SHBASENAME"

    rem ------------------------------------------------------
    rem Файл скрипта: имя+расширение
    rem ------------------------------------------------------
    LOG_SHFILENAME=$(basename "$SHFile")
    rem echo "LOG_SHFILENAME=$LOG_SHFILENAME"
    rem ------------------------------------------------------

    rem ------------------------------------------------------
    rem Каталог журналов
    rem ------------------------------------------------------
    if [[ -z "$LOG_DIR" ]] ; then
        LOG_DIR="$SHDir"
    fi
    rem echo "LOG_DIR=$LOG_DIR"

    rem ------------------------------------------------------
    rem Файл журнала: каталог+имя+расширение
    rem ------------------------------------------------------
    if [[ -z "$LOG_FILE" ]] ; then
        if [[ "$LOG_FILE_DT" -eq 1 ]] ; then
            DT=$(YYYYMMDDHHMMSS)
            DT=$(DateTime $LOG_DT_FORMAT)
            LOG_FILE="$LOG_DIR"/"$DT".log
        else
            LOG_FILE="$SHFile.log"
        fi
    else
        if [[ "$LOG_FILE_DT" -eq 1 ]] ; then
            DT=$(YYYYMMDDHHMMSS)
            LOG_FILE="$LOG_DIR"/"$DT"_"$LOG_FILE"
        else
            LOG_FILE="$LOG_DIR"/"$LOG_FILE"
        fi
    fi
    rem echo "LOG_FILE=$LOG_FILE"
  
    rem ------------------------------------------------------
    rem LOG_STR
    rem ------------------------------------------------------
    LOG_STR=""
    
    rem ------------------------------------------------------
    rem Открытие файла журнала
    rem ------------------------------------------------------
    if [[ "$LOG_FILE_ADD" -eq 1 ]] ; then
        LFileName="$LOG_FILE"
        if [ -r "$LFileName" ] ; then
            rem echo "$LFileName"
            rm "$LFileName"
        fi
        touch "$LFileName"
    fi
    exec 3>>"$LFileName"

    rem -------------------------------------------------------------------
    AddLog $loAll $INFO "Старт: $(date +"$FORMAT")"
    rem -------------------------------------------------------------------
}
rem endfunction

rem --------------------------------------------------------------------------------
rem StopLogFile ():
rem --------------------------------------------------------------------------------
function StopLogFile { rem ():
rem beginfunction
    rem echo 'StopLogFile...'
    rem -------------------------------------------------------------------
    AddLog $loAll $INFO "Стоп: $(date +"$FORMAT")"
    rem -------------------------------------------------------------------
    exec 3>&-
}
rem endfunction

#:Exit
